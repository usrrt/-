1. 순열
순열 - 순서와 상관있음
조합 - 순서상관 없음

prev_permutation : 내림차순 기반 순열
next_permutation : 오름차순 기반 순열
	- 사용하기 전에 배열을 오름차순으로 정렬하고 사용해야 오류가 나지 않음

순열 공식
nPr = n! / (n-r)! 
	: n개중에 r개를 순서있게 뽑는다

순열 사용법(do-while)
do{
	// 
}while(next_permutation(v.begin(), v.end()));





2. 재귀로 순열 구현
순열은 swap과정이 필요 => 원복해야함

void makePermutaion(int n, int r, int depth)
{
	if(r == depth)
	{
		// 순열 하나 생성
		return;
	}

	for(int i = depth; i < n; i++)
	{
		swap(v[i], v[depth]);
		makePermutation(n, r, depth + 1);
		swap(v[i], v[depth]);
	}
	return;
}






3. 조합

nCr = n! / r!(n-r)!
	: n개 중에 r개를 순서와 상관없이 뽑는다

조합구현시 
4개 이상 뽑을경우 => 재귀함수
3개 이하 뽑을경우 => 중첩 for문

- 재귀로 조합 구현
void combi(int start, vector<int> b)
{
	if(b.size() == k) n개중 k개를 뽑았을때가 기저사례
		return;

	for(int i = start + 1; i < n; i++) -> 인덱스 기반으로 뽑아야 헷갈리지 않는다
	{
		b.push_back(i);
		combi(i, b);
		b.pop_back(i); 원복과정
	}
	return;
}

- 중첩for문으로 조합 구현
3개를 뽑으면 3중for문, 2개를 뽑으면 2중 for문
for(int i = 0; i < n; i++)			|	for(int i = 0; i < n; i++)
	for(int j = 0; j < i; j++)		|		for(int j = i + 1; j < n; j++)
		for(int k = 0; k < j; k++)	|			for(int k = j + 1; k < n; k++)





4. split()
- 문자열을 특정 문자열 기준으로 쪼개어 배열화 시키는 함수

vector<string> split(string input, string delimeter)
{
	vector<string> result;
	string token = "";
	long long pos = 0;
	while((pos = input.find(delimiter)) != string::npos)
	{
		token = input.substr(0, pos);
		result.push_back(token);
		input.erase(0, pos + delimiter.length()); -> pos위치에서 구분자 크기만큼 더해 구분자를 포함한 앞의 문자들을 제거한다
	}
	result.push_back(input);

	return result;
}





5. 누적합
- 요소들의 누적된 합의 의미
- 어떠한 배열을 기반으로 앞에서 부터 요소들의 누적된 합을 저장해 새로운 배열을 만들어 이를 활용함

보통배열의 시작은 0번째부터 시작하지만 prefixSum을 만들때는 1번째 부터 배열을 담아야 만들기 쉽다

배열의 요소가 변하지 않는 정적배열인 경우에만 누적합을 활용할 수 있다

pSum[i] = pSum[i - 1] + a[i] 
	: i - 1 부터 시작하기 때문에 1번째 부터 배열을 담아야한다
for(int i = 1; i <= n; i++)
{
	cin >> a[i];
	pSum[i] = pSum[i - 1] + a[i];
}

5 ~ 3 구간 합 -> pSum[5] - pSum[2]